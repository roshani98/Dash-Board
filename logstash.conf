input {
	beats {
		port => "5044"
	}
}
filter {
   grok {
	   match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \| %{LOGLEVEL:log_level} \| \[(?<thread_name>\b[\w\-]+\b)\] \| %{JAVAFILE:class}\:%{JAVAMETHOD:method}\(%{NUMBER:line_number:int}\) \| %{HOSTPORT:hostname} \| %{WORD:appname} \| QueueName :: %{WORD:queue_name} MessagesCurrentCount :: %{NUMBER:message_current_count:int} MessageHighCount :: %{NUMBER:message_high_count:int} MessagePendingCount :: %{NUMBER:message_pending_count:int} MessagesReceivedCount :: %{NUMBER:message_received_count:int} BytesCurrentCount :: %{NUMBER:bytes_current_count:int} BytesHighCount :: %{NUMBER:bytes_high_count:int} BytesReceivedCount :: %{NUMBER:bytes_received_count:int} BytesThresholdTime :: %{NUMBER:bytes_threshold_time:int}" }
	   add_field => { "logtype" => "monitoring" }
   }
   grok {
	   match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \| %{LOGLEVEL:log_level} \| \[(?<thread_name>\b[\w\-]+\b)\] \| %{JAVAFILE:class}\:%{JAVAMETHOD:method}\(%{NUMBER:line_number:int}\) \| %{HOSTPORT:hostname} \| %{WORD:appname} \| lDataSourceName :: %{WORD:data_source_name} LeakedConnCount :: %{NUMBER:leaked_connection_count:int} ActiveConnHighCount :: %{NUMBER:active_connection_high_count:int} ActiveConnCurrentCount :: %{NUMBER:active_connection_current_count:int} ActiveConnAverageCount :: %{NUMBER:active_connection_average_count:int} ConnectionDelayTime :: %{NUMBER:connection_delay_time:int} MaxCapacity :: %{NUMBER:max_capacity:int} ConnectionsTotalCount :: %{NUMBER:connections_total_count:int} FailuresToReconnectCount :: %{NUMBER:failures_to_reconnect_count:int} CurrCapacity :: %{NUMBER:current_capacity:int}" }
	   add_field => { "logtype" => "monitoring" }
	}
   grok {
       match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \| %{LOGLEVEL:log_level} \| \[(?<thread_name>\b[\w\-]+\b)\] \| %{JAVAFILE:class}\:%{JAVAMETHOD:method}\(%{NUMBER:line_number:int}\) \| %{HOSTPORT:hostname} \| %{WORD:appname} \| CommittedVirtualMemorySize :: %{NUMBER:committed_virtual_memory_size:int} FreePhysicalMemorySize :: %{NUMBER:free_physical_memory_size:int} FreeSwapSpaceSize :: %{NUMBER:free_swap_space_size:int} ProcessCpuLoad :: %{NUMBER:process_cpu_load:float} ProcessCpuTime :: %{NUMBER:process_cpu_time:int} SystemCpuLoad :: %{NUMBER:system_cpu_load:float} TotalPhysicalMemorySize :: %{NUMBER:total_physical_memory_size:int} TotalSwapSpaceSize :: %{NUMBER:total_swap_space_size:int}" }
	   add_field => { "logtype" => "monitoring" }
   }
   grok {
       match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \| %{LOGLEVEL:log_level} \| \[(?<thread_name>\b[\w\-]+\b)\] \| %{JAVAFILE:class}\:%{JAVAMETHOD:method}\(%{NUMBER:line_number:int}\) \| %{HOSTPORT:hostname} \| DiskTotalSpaceGB :: %{NUMBER:disk_total_space_gb:int} DiskFreeSpaceGB :: %{NUMBER:disk_free_space_gb:int} DiskTotalSpaceMB :: %{NUMBER:disk_total_space_mb:int} DiskFreeSpaceMB :: %{NUMBER:disk_free_space_mb:int}" }
	   add_field => { "logtype" => "monitoring" }
   }
   grok {
       match => { "message" => "%{BASE16FLOAT:time}: \[(?<gc_time>\b[\w\.]+\b): \[ParNew: %{NUMBER:parallel_process_new_from:int}K\-\>%{NUMBER:parallel_process_new_to:int}K\(%{NUMBER:parallel_process_new_allocated:int}K\), %{BASE16FLOAT:time_taken_for_cleanup_new:float} secs\] %{NUMBER:parallel_process_old_from:int}K\-\>%{NUMBER:parallel_process_old_to:int}K\(%{NUMBER:parallel_process_old_allocated:int}K\), %{BASE16FLOAT:time_taken_for_cleanup_old:float} secs\] \[Times: user\=%{BASE16FLOAT:user_time:float} sys\=%{BASE16FLOAT:sys_time:float}, real\=%{BASE16FLOAT:real_time:float} secs\]" }
	   add_field => { "logtype" => "gc" }
   }
   grok {
       match => { "message" => "%{JAVASTACKTRACEPART}" }
	   add_field => { "logtype" => "stacktrace" }
   }
}
output {
	elasticsearch {
		hosts => [ "localhost:9200" ]
		index => "index"
		user => elastic
		password => elastic
	}
}
